<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx.xsd
                     http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop.xsd
                     http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">


	<!-- 主动扫描@Service注解,由spring父容器扫描,解决注解事务回滚失败的问题,
		父容器进行初始化的Service是保证事务的增强处理能力的-->
	<context:component-scan base-package="com.sh"/>  
	
	<!-- 加载数据库配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />


	<!-- 配置数据源 -->
	<!-- <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">		
		<property name="driverClassName" value="${driver_mysql_class}"></property>
		<property name="url" value="jdbc:mysql://localhost/splatform_db?useUnicode=true&amp;characterEncoding=UTF-8"></property>
		<property name="username" value="${database_mysql_user}"></property>
		<property name="password" value="${database_mysql_password}"></property>
	</bean> -->
	
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${driver_mysql_class}" />
		<property name="driverUrl" value="jdbc:mysql://localhost/splatform_db?useUnicode=true&amp;characterEncoding=UTF-8" />
		<!-- <property name="driverUrl" value="jdbc:oracle:thin:@192.168.0.126:1521:jiagulun" /> -->
		<property name="user" value="${database_mysql_user}" />
		<property name="alias" value="pool_dbname" />
		<property name="password" value="${database_mysql_password}" />
		<property name="maximumActiveTime" value="300000" />
		<property name="prototypeCount" value="4" />
		<property name="maximumConnectionCount" value="25" />
		<property name="minimumConnectionCount" value="2" />
		<property name="simultaneousBuildThrottle" value="30" />
		<property name="trace" value="true" />
		<property name="houseKeepingTestSql" value="select sysdate from dual" />
	</bean>
	
	
	
	

	<!-- 配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
			</props>
		</property>

		<!--
		<property name="packagesToScan" value="com.**.bo"/> 
　　你也可以以清单的方式指定多于1条的匹配字串，如： 
　　<property name="packagesToScan"> 
　　<list> 
　　<value>com.abc.core.bo</value> 
　　<value>com.abc.auditing.bo</value> 
　　</list> 
　　</property>-->
		<property name="annotatedClasses">
			<list>
				<value>com.sh.manage.entity.AppUser</value>
				<value>com.sh.manage.entity.SysUser</value>
				<value>com.sh.manage.entity.SysGroup</value>
				<value>com.sh.manage.entity.SysRole</value>
				<value>com.sh.manage.entity.SysMenu</value>
				<value>com.sh.manage.entity.SysOperate</value>
				<value>com.sh.manage.entity.SysGroupRole</value>
				<value>com.sh.manage.entity.SysRoleMenu</value>
				<value>com.sh.manage.entity.Member</value>
				<value>com.sh.manage.entity.Vipcard</value>
				<value>com.sh.manage.entity.Goods</value>
			</list>
		</property>
	</bean>

	<!-- 注入 spring的jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>



	<!-- 配置一个事务管理器 -->
	<!-- 配置事务管理器bean,使用HibernateTransactionManager事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<!--为事务管理器注入sessionFactory" -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 注解实现事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />


	<aop:aspectj-autoproxy expose-proxy="true" />
	<!-- 实现@AspectJ注解的，默认使用AnnotationAwareAspectJAutoProxyCreator进行AOP代理，它是BeanPostProcessor的子类，在容器启动时Bean初始化开始和结束时调用进行AOP代理的创建，因此只对当容器启动时有效，使用时注意此处。 -->


	<!-- 声明式容器管理事务 建议使用声明式容器管理事务，而不建议使用注解容器管理事务（虽然简单），但太分布式了，采用声明式容器管理事务一般只对service层进行处理。 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="txManager"> <tx:attributes> 
		<tx:method name="save*" propagation="REQUIRED" /> <tx:method name="add*" 
		propagation="REQUIRED" /> <tx:method name="create*" propagation="REQUIRED" 
		/> <tx:method name="insert*" propagation="REQUIRED" /> <tx:method name="update*" 
		propagation="REQUIRED" /> <tx:method name="merge*" propagation="REQUIRED" 
		/> <tx:method name="del*" propagation="REQUIRED" /> <tx:method name="remove*" 
		propagation="REQUIRED" /> <tx:method name="put*" propagation="REQUIRED" /> 
		<tx:method name="use*" propagation="REQUIRED" /> hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 
		<tx:method name="get*" propagation="REQUIRED" read-only="true" /> <tx:method 
		name="count*" propagation="REQUIRED" read-only="true" /> <tx:method name="find*" 
		propagation="REQUIRED" read-only="true" /> <tx:method name="list*" propagation="REQUIRED" 
		read-only="true" /> <tx:method name="*" read-only="true" /> </tx:attributes> 
		</tx:advice> <aop:config expose-proxy="true"> 只对业务逻辑层实施事务 <aop:pointcut id="txPointcut" 
		expression="execution(* com..service.*Service.*(..))" /> <aop:advisor advice-ref="txAdvice" 
		pointcut-ref="txPointcut" /> </aop:config> -->
</beans>